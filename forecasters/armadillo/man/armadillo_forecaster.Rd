% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/armadillo_forecaster.R
\name{armadillo_forecaster}
\alias{armadillo_forecaster}
\title{Aramdillo forecaster}
\usage{
armadillo_forecaster(
  before_pan = TRUE,
  mob_shift = 0,
  mob_fun = "min",
  DC = NULL,
  initial_fun = function(x) {     max(x) * 0.75 },
  initial_val = c(0, 0, 0, 1),
  lower,
  upper,
  ...
)
}
\arguments{
\item{before_pan}{if TRUE, the parameter out in mobility_model is 0, and the first estimated response must be 0. See details in mobility_model.}

\item{mob_shift}{the number of epiweek that mobility variable is shifted backwards.}

\item{mob_fun}{the function applied to mobility variables, min, mean, or max.}

\item{DC}{death delay curve, numerical vector. If NULL, a gamma distribution with scale 3.64, shape 6.28 is used.}

\item{initial_fun}{function to initialize the normalized parameter At. It is a function of the sum of death incidence number over week.}

\item{initial_val}{initialized values for other model parameters, beta, alpha, mu, sigma.}

\item{lower}{lower bound for parameters (At, beta, alpha, mu, sigma).}

\item{upper}{upper bound for parameters (At, beta, alpha, mu, sigma).}

\item{...}{control arguments in optim_sa, such as initial temperature, temperature reduction in outer loop, ...}
}
\value{
A forecaster that works with evalcast.
}
\description{
Armadillo forecaster only gives point forecaster, not quantile forecaster.
}
\examples{
signals <- tibble::tibble(
  data_source = c("jhu-csse", "safegraph"),
  signal = c("deaths_incidence_num", "completely_home_prop"),
  start_day = c("2020-03-08", "2020-03-01")
)

arma_forecaster <- armadillo_forecaster(
  before_pan = TRUE,
  mob_shift = 1,
  mob_fun = "min",
  DC = NULL,
  initial_fun = function(x) {
    max(x) * 0.6
  },
  initial_val = c(0, 0, 0, 1),
  lower = c(0, -40, -4, -2, 0.00001),
  upper = c(Inf, 40, 4, 2, 2),
  t0 = 30000, r = 0.95, nlimit = 2000
)

res_armadillo <- evalcast::get_predictions(arma_forecaster,
  name_of_forecaster = "armadillo",
  signals,
  forecast_dates = "2020-07-20",
  incidence_period = "epiweek",
  ahead = 1:3,
  geo_type = "state",
  geo_values = "*"
)

eva <- evalcast::evaluate_predictions(res_armadillo)
}
